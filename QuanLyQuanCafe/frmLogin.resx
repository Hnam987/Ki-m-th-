<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="label3.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>